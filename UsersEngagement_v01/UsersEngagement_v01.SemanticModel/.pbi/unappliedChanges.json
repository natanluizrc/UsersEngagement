{
  "version": "1.0",
  "conceptualSchemaSettings": {},
  "queries": [
    {
      "name": "(Fun01) Get Token",
      "lineageTag": "4ec0481a-21a4-4ca7-bef3-d1f6c89e2418",
      "queryGroupId": "ebcff5d1-b5b4-4ee5-87e2-5cf3cc0bffe9",
      "navigationStepName": "Navegação",
      "text": [
        "let",
        "    // Função para obter o token de acesso",
        "    ObterTokenAcesso = () =>",
        "    let",
        "        // Credenciais fixas (ocultas)",
        "        IdLocatario = \"***********************\",",
        "        IdCliente = \"***********************\",",
        "        SegredoCliente = \"***********************\",",
        "",
        "        // URL para obter o token",
        "        UrlToken = \"https://login.microsoftonline.com/\" & IdLocatario & \"/oauth2/v2.0/token\",",
        "",
        "        // Parâmetros da requisição",
        "        DadosRequisicao = \"grant_type=client_credentials&client_id=\" & IdCliente & \"&client_secret=\" & SegredoCliente & \"&scope=https://analysis.windows.net/powerbi/api/.default\",",
        "",
        "        // Chamada da API",
        "        RespostaApi = Web.Contents(UrlToken, [",
        "            Content = Text.ToBinary(DadosRequisicao),",
        "            Headers = [#\"Content-Type\"=\"application/x-www-form-urlencoded\"]",
        "        ]),",
        "",
        "        // Extrai o token de acesso",
        "        JsonToken = Json.Document(RespostaApi),",
        "        TokenAcesso = JsonToken[access_token]",
        "    in",
        "        TokenAcesso",
        "in",
        "    ObterTokenAcesso"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Function",
      "isHidden": false
    },
    {
      "name": "(Fun02) Get Reports",
      "lineageTag": "3191f12d-4bf9-4c3c-97d6-4955e31c01ba",
      "queryGroupId": "ebcff5d1-b5b4-4ee5-87e2-5cf3cc0bffe9",
      "navigationStepName": "Navegação",
      "text": [
        "(GroupId as text) =>",
        "let",
        "    // Obtém o token de acesso",
        "    TokenAcesso = #\"(Fun01) Get Token\"(),",
        "",
        "    // Define URL da API para listar relatórios",
        "    UrlRelatorios = \"https://api.powerbi.com/v1.0/myorg/groups/\" & GroupId & \"/reports\",",
        "",
        "    // Requisição GET na API",
        "    RespostaApi = Json.Document(Web.Contents(UrlRelatorios, [",
        "        Headers = [#\"Authorization\" = \"Bearer \" & TokenAcesso]",
        "    ])),",
        "",
        "    // Extrai lista de relatórios",
        "    ListaRelatorios = RespostaApi[value],",
        "",
        "    // Converte lista para tabela",
        "    TabelaRelatorios = Table.FromList(ListaRelatorios, Splitter.SplitByNothing(), null, null, ExtraValues.Error)",
        "in",
        "    TabelaRelatorios"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Function",
      "isHidden": false
    },
    {
      "name": "(Tab00) Measures",
      "lineageTag": "636080c4-9f73-469a-a024-83dd7415e773",
      "navigationStepName": "Navegação",
      "text": [
        "let",
        "    // Carrega a tabela de medidas comprimida",
        "    FonteDados = Table.FromRows(",
        "        Json.Document(",
        "            Binary.Decompress(",
        "                Binary.FromText(\"i45W8k1NLC4tSi1Wio0FAA==\", BinaryEncoding.Base64), ",
        "                Compression.Deflate",
        "            )",
        "        ), ",
        "        let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Measures = _t]",
        "    ),",
        "",
        "    // Altera o tipo de dados da coluna Measures para texto",
        "    TipoAlterado = Table.TransformColumnTypes(FonteDados, {{\"Measures\", type text}})",
        "in",
        "    TipoAlterado"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    // Carrega a tabela de medidas comprimida\\n    FonteDados = Table.FromRows(\\n        Json.Document(\\n            Binary.Decompress(\\n                Binary.FromText(\\\"i45W8k1NLC4tSi1Wio0FAA==\\\", BinaryEncoding.Base64), \\n                Compression.Deflate\\n            )\\n        ), \\n        let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Measures = _t]\\n    ),\\n\\n    // Altera o tipo de dados da coluna Measures para texto\\n    TipoAlterado = Table.TransformColumnTypes(FonteDados, {{\\\"Measures\\\", type text}})\\nin\\n    TipoAlterado\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "(Tab01) Get Groups",
      "lineageTag": "68bd421c-522d-4e25-aec6-741ebf9a5489",
      "navigationStepName": "Navegação",
      "text": [
        "let",
        "    // Obtém o token de acesso",
        "    TokenAcesso = #\"(Fun01) Get Token\"(),",
        "",
        "    // Define URL da API para listar grupos",
        "    UrlGrupos = \"https://api.powerbi.com/v1.0/myorg/groups?$top=1000\",",
        "",
        "    // Requisição GET na API",
        "    RespostaApi = Json.Document(Web.Contents(UrlGrupos, [",
        "        Headers = [#\"Authorization\" = \"Bearer \" & TokenAcesso]",
        "    ])),",
        "",
        "    // Extrai lista de grupos",
        "    ListaGrupos = RespostaApi[value],",
        "",
        "    // Converte lista para tabela",
        "    TabelaGrupos = Table.FromList(ListaGrupos, Splitter.SplitByNothing(), null, null, ExtraValues.Error),",
        "",
        "    // Expande todas as colunas dos grupos",
        "    GruposExpandidos = Table.ExpandRecordColumn(TabelaGrupos, \"Column1\", ",
        "        {\"capacityId\", \"dataflowStorageId\", \"defaultDatasetStorageFormat\", \"id\", \"isOnDedicatedCapacity\", \"isReadOnly\", \"logAnalyticsWorkspace\", \"name\"},",
        "        {\"Group_CapacityId\", \"Group_DataflowStorageId\", \"Group_DefaultDatasetStorageFormat\", \"Group_Id\", \"Group_IsOnDedicatedCapacity\", \"Group_IsReadOnly\", \"Group_LogAnalyticsWorkspace\", \"Group_Name\"}",
        "    )",
        "in",
        "    GruposExpandidos"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    // Obtém o token de acesso\\n    TokenAcesso = #\\\"(Fun01) Get Token\\\"(),\\n\\n    // Define URL da API para listar grupos\\n    UrlGrupos = \\\"https://api.powerbi.com/v1.0/myorg/groups?$top=1000\\\",\\n\\n    // Requisição GET na API\\n    RespostaApi = Json.Document(Web.Contents(UrlGrupos, [\\n        Headers = [#\\\"Authorization\\\" = \\\"Bearer \\\" & TokenAcesso]\\n    ])),\\n\\n    // Extrai lista de grupos\\n    ListaGrupos = RespostaApi[value],\\n\\n    // Converte lista para tabela\\n    TabelaGrupos = Table.FromList(ListaGrupos, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\\n\\n    // Expande todas as colunas dos grupos\\n    GruposExpandidos = Table.ExpandRecordColumn(TabelaGrupos, \\\"Column1\\\", \\n        {\\\"capacityId\\\", \\\"dataflowStorageId\\\", \\\"defaultDatasetStorageFormat\\\", \\\"id\\\", \\\"isOnDedicatedCapacity\\\", \\\"isReadOnly\\\", \\\"logAnalyticsWorkspace\\\", \\\"name\\\"},\\n        {\\\"Group_CapacityId\\\", \\\"Group_DataflowStorageId\\\", \\\"Group_DefaultDatasetStorageFormat\\\", \\\"Group_Id\\\", \\\"Group_IsOnDedicatedCapacity\\\", \\\"Group_IsReadOnly\\\", \\\"Group_LogAnalyticsWorkspace\\\", \\\"Group_Name\\\"}\\n    )\\nin\\n    GruposExpandidos\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "(Tab02) Get Reports",
      "lineageTag": "cc888daa-6afd-4f46-8736-bf9b28c627f7",
      "navigationStepName": "Navegação",
      "text": [
        "let",
        "    // Obtém os grupos",
        "    FonteGrupos = #\"(Tab01) Get Groups\",",
        "    ",
        "    // Mantém apenas a coluna Group_Id",
        "    GruposSelecionados = Table.SelectColumns(FonteGrupos, {\"Group_Id\"}),",
        "",
        "    // Chama a função para obter relatórios",
        "    RelatoriosAdicionados = Table.AddColumn(GruposSelecionados, \"Reports\", each #\"(Fun02) Get Reports\"([Group_Id])),",
        "    RelatoriosExpandidos = Table.ExpandTableColumn(RelatoriosAdicionados, \"Reports\", {\"Column1\"}),",
        "",
        "    // Expande todas as colunas dos relatórios",
        "    ColunasExpandidas = Table.ExpandRecordColumn(RelatoriosExpandidos, \"Column1\", ",
        "        {\"appId\", \"datasetId\", \"description\", \"embedUrl\", \"id\", \"isOwnedByMe\", \"name\", \"originalReportId\", \"reportType\", \"webUrl\"},",
        "        {\"Report_AppId\", \"Report_DatasetId\", \"Report_Description\", \"Report_EmbedUrl\", \"Report_Id\", \"Report_IsOwnedByMe\", \"Report_Name\", \"Report_OriginalReportId\", \"Report_Type\", \"Report_WebUrl\"}",
        "    )",
        "in",
        "    ColunasExpandidas"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    // Obtém os grupos\\n    FonteGrupos = #\\\"(Tab01) Get Groups\\\",\\n    \\n    // Mantém apenas a coluna Group_Id\\n    GruposSelecionados = Table.SelectColumns(FonteGrupos, {\\\"Group_Id\\\"}),\\n\\n    // Chama a função para obter relatórios\\n    RelatoriosAdicionados = Table.AddColumn(GruposSelecionados, \\\"Reports\\\", each #\\\"(Fun02) Get Reports\\\"([Group_Id])),\\n    RelatoriosExpandidos = Table.ExpandTableColumn(RelatoriosAdicionados, \\\"Reports\\\", {\\\"Column1\\\"}),\\n\\n    // Expande todas as colunas dos relatórios\\n    ColunasExpandidas = Table.ExpandRecordColumn(RelatoriosExpandidos, \\\"Column1\\\", \\n        {\\\"appId\\\", \\\"datasetId\\\", \\\"description\\\", \\\"embedUrl\\\", \\\"id\\\", \\\"isOwnedByMe\\\", \\\"name\\\", \\\"originalReportId\\\", \\\"reportType\\\", \\\"webUrl\\\"},\\n        {\\\"Report_AppId\\\", \\\"Report_DatasetId\\\", \\\"Report_Description\\\", \\\"Report_EmbedUrl\\\", \\\"Report_Id\\\", \\\"Report_IsOwnedByMe\\\", \\\"Report_Name\\\", \\\"Report_OriginalReportId\\\", \\\"Report_Type\\\", \\\"Report_WebUrl\\\"}\\n    )\\nin\\n    ColunasExpandidas\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Exception",
      "isHidden": false
    }
  ],
  "queryGroups": [
    {
      "name": "Funções",
      "id": "ebcff5d1-b5b4-4ee5-87e2-5cf3cc0bffe9",
      "description": ""
    }
  ],
  "culture": "pt-BR",
  "firewallEnabled": true
}